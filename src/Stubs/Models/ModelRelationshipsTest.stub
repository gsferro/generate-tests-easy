<?php

use {{ modelNamespace }}\{{ modelClass }};
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

uses(TestCase::class, RefreshDatabase::class);

beforeEach(function() 
{
    // Create a model instance for testing
    $this->model = new {{ modelClass }}();

    // If factory exists, create a model instance with factory
    {{ factorySetup }}
});

test('{{ modelClass }} has the expected relationship methods', function()
{
    // Check that the model has the expected relationship methods
    {{ relationshipMethodChecks }}
});

{{ individualRelationshipTests }}

test('Relationships return the correct instance types', function() 
{
    // This test will be skipped if no relationships are found
    $hasRelationships = false;

    $reflection = new ReflectionClass({{ modelClass }}::class);
    $methods = $reflection->getMethods(ReflectionMethod::IS_PUBLIC);

    foreach ($methods as $method) {
        if ($method->class !== {{ modelClass }}::class) {
            continue;
        }

        $methodName = $method->getName();

        // Skip non-relationship methods
        if (in_array($methodName, ['__construct', 'boot', 'booted'])) {
            continue;
        }

        try {
            // Check if method returns a relation
            $relation = $this->model->$methodName();

            if (
                $relation instanceof BelongsTo || 
                $relation instanceof HasMany || 
                $relation instanceof HasOne || 
                $relation instanceof BelongsToMany
            ) {
                $hasRelationships = true;

                // Test the relationship type
                match (true) {
                    $relation instanceof BelongsTo => expect($relation)->toBeInstanceOf(BelongsTo::class),
                    $relation instanceof HasMany => expect($relation)->toBeInstanceOf(HasMany::class),
                    $relation instanceof HasOne => expect($relation)->toBeInstanceOf(HasOne::class),
                    $relation instanceof BelongsToMany => expect($relation)->toBeInstanceOf(BelongsToMany::class),
                    default => null
                };
            }
        } catch (\Exception $e) {
            // If we can't call the method, skip it
            continue;
        }
    }

    if (!$hasRelationships) {
        $this->markTestSkipped('No relationships found in {{ modelClass }} model');
    }
})->group('relationships');
